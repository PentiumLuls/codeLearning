import React from 'react';

export const notes = [[
    {
        title: "Добро пожаловать, герой",
        text: [
            {
                title: "Пролог",
                text: `Мир ООП - грязный и жестокий. Напротив же, мир функционального программирования предлагает 
                невиданные ранее возможности.
                Этот квест поможет тебе освоить функциональное программирование. 
                Тебе предстоит спасти жителей этого мира от грязных лап демона Мефисто, поработившего нагрешивших бедолаг.
                Место действий - "Функционилище" - последнее пристанище ООПешников. Прошу проходить, для тебя мы подготовили
                особый котел~`
            },
            {
                title: "В огне",
                text: `Открыв глаза, ты увидел яркий свет. Ты горишь. И всё вокруг тебя тоже горит. Вдали ты слышишь чей-то ехидный смех.
                Ты чувствуешь, что плохо проведёшь время.`
            },
            {
                title: "Окно приветствия",
                text: <div><p>В начале некоторых уровней ты сможешь просмотреть полезную информацию по этому уровню: например, туториал к нему. Желаешь посмотреть еще раз? Не беда! Всю эту информацию ты сможешь найти в своём журнале</p>
                    <img className="image-flex" src={require("../../src/img/popup.jpeg")} /></div>
            },
            {
                title: "Левая панель",
                text: <div><p>На левой панели находится список квестов и переключатели между журналом и редактором кода. Ты можешь свободно переключаться между квестами, которые тебе доступны"</p>
                <img className="image-flex" src={require("../../src/img/leftpanel.jpeg")} /></div>
            },
            {
                title: "Квесты",
                text: <div><p>В редакторе кода ты можешь писать свой код. Чтобы запустить его, нажми кнопку 'Run code'. Если задание выполнено правильно, разблокируется следующий квест. Запутался в коде? Нажми кнопку 'Reset'.</p>
                    <img className="image-flex" src={require("../../src/img/codeditor.jpeg")} /></div>
            },
            {
                title: "Терминал",
                text: <div><p>Результат запуска твоего кода будет отображаться здесь. Также ты можешь очистить его с помощью нажатия кнопки 'Clear terminal'</p>
                    <img className="image-flex" src={require("../../src/img/terminal.jpeg")} /></div>
            },
            {
                title: "Чат",
                text: <div><p>В чате к тебе будут обращаться сюжетные персонажи. Также ты можешь запросить здесь подсказку. В режиме журнала чат недоступен.</p>
                    <img className="image-flex" src={require("../../src/img/chatbox.jpeg")} /></div>
            },
            {
                title: "Журнал",
                text: <div><p>Если будет нужна помощь, заглядывай в журнал. Здесь ты сможешь найти различные руководства и туториалы к уровням</p>
                    <img className="image-flex" src={require("../../src/img/journal.jpeg")} /></div>
            },
        ]
    },
    {
        title: "6 функциональных законов",
        text: [
            {
                title: "Не загрезняй функцию свою",
                text: `Функции как и вы люди, хотят быть чистыми. И если функция чуйствует что она стала грязной
            она обизательно закидает тебя ошыбками. Что же далает функцию грязной? Представте,
            что вы - функция, и вокруг вас коробка (область видимости), а вокруг нее куча глязи.
            Если вы хотите взять что-то из вне, вам нужно сходить за ним через грязь, и тоже самое
            если вы хотите что-то снаружы изменить. И ведь все го чего вы хотите в этой жызне,
            это просто жыть в коробке и никого не трогать. Когда вы кому то нужны, они закинули вам какие то вещи,
            вы что то там с ними сделали и выкинуть какой другой результат`,
            },
            {
                title: "Делай функцию свою или первокласной или высшей",
                text: `Запомни рас и навсегда, есть 2 типа функций : одни хотят править,
            а другие хотят что бы правили ими.`,
            },
            {
                title: "Весь мир это функция, а мы в ней константы",
                text: `Все вокруг константы: ты, твои друзья, родственники. Представь если бы
            все твои друзья постоянно меняли имена и места жытельства,
            смог бы ты запомнить все изменения? Нужен друг с другим именем?
            Не проблема, создай нового.`,
            },
            {
                title: "Лямбда всему голова",
                text: `Как я говорил ранее, весь мир єто функция, так вот я не шутил. Функции везде
            и они могут передвать друг другу значения, операция карирования. Так вот карирование 
            это как конвеер. По конвееру едут данные, и в каждой функции (каком нибуть станке или роботе)
            мы добавляем новые данные.`,
            },
            {
                title: "Рекурсия - лучшый друг программиста",
                text: `Забудь о цыклах вроде for и while!!! Зачем они тебе если можно все заменить на рекурсию,
            и возможностей больше, и побочных еффектов можно избежать`,
            },
            {
                title: "Артефакты спасут мир",
                text: `Только истинный последователь сможет овладеть артефактом, который поможет ему
            в выполнении тысяч вселенских задач и спасении от нарушения функциональных грехов.
            А за легендой, однажды придет герой, который соберет все 3 артефакта и разобьет оковы
            с вечных рабов преисподней и подарит миру свободу`,
            },
        ]
    },
    {
        title: "Назойливый незнакомец",
        text: [
            {
                title: "Просьба",
                text: `А ты не промах! Эх... Возможно ты сможешь мне помочь! Чёртов демон не даёт нам жить, поэтому мы собираем армию.
             Но вот проблема: мне поручили отобрать воинов среди мужчин, и это, чёрт побери, сложно! `,
            },
        ]
    },
    {
        title: "Иммутабельность",
        text: [
            {
                title: "Иммутабельность",
                text: `Неизменяемым (Иммутабельным) называется объект, состояние которого не может быть изменено после 
                создания. Результатом любой модификации такого объекта всегда будет новый объект, при этом старый объект не изменится. `,
            },
            {
                title: "Иммутабельность в JS",
                text: `В JS для клонирование елементов есть множество путей, например использовать const newOblect = Object.assign({}, object), 
                или использовать spread оператор const newMass = [...mass]. Что-бы обезопасить себя от мутации, обьявляйте переменные при помощи const.`,
            },
            {
                title: "Лучшие методы",
                text: `Так же плохой практикой считается использовать методы вроде splice которые изменяют начальный массив. 
                Вместо них стоит использовать методы вроде filter, map, reduce которые возращают новый обьект.`,
            },
        ]
    },
    {
        title: "Ярмо",
        text: [
            {
                title: "Что-то сюжетное",
                text: `В комнату входят индусы. Их поток не останавливаеться. Ты чувствуешь себя неловко.`,
            },
            {
                title: "Что-то сюжетное",
                text: `"Вау, да ты крут! Братик, может как-нибудь поможешь мне?"`,
            },
            {
                title: "Что-то сюжетное",
                text: `Мастер: "Броня - это хорошо, но чем мы будем сражаться? О, я знаю, вот тебе палка, экипируй моих братков.
                Только вот в чем загвоздка: если ты нарушишь один из 6 функциональных законов, то ниспошлешь на нас великую беду
                Поэтому, вот тебе еще один урок."`,
            },
            {
                title: "Первый функциональный закон - чистые функции",
                text: `Всё просто. Они зависят только от своих параметров. И возвращают только свой результат. `,
            },
            {
                title: "Нельзя писать в глобальную переменную",
                text: ``,
            },
            {
                title: "Чистые функции могут вызывать только чистые функции.",
                text: ``,
            },
            {
                title: "Неизменяемые функции",
                text: `Параметры в чистых функциях могут быть неизменяемыми. При этом вызов к такой функции не может быть кеширован или вызван асинхронно, если параметры ссылаются на изменяемые данные.`,
            },
        ]
    },
    {
        title: "Объединение в отряды",
        text: [
            {
                title: "Что-то про отряды",
                text: `Для большей эффективности, как боевая сила, индусы любят объединятся в отряды. В чём заключается эффективность,
                кажется, не знают даже сами индусы, однако они так лучше себя чувствуют на поле боя, так как при разбитии
                на отряды складывается иллюзия существования какой-то тактики или стратегии. На деле же вся стратегия заключается
                в том, что ты хардкодишь всех до смерти. Совет да смерть.`,
            },

        ]
    },
    /*{
        title: "Герой",
        text: [
            {
                title: "Истинный герой",
                text: `Однажды появиться в аду один человек, который будет отличаться от обычних обитателей преисподней.
             Будет он благороден, миролюбив и невероятно талантлив. Он сразу не понравиться Mephisto, ведь такие гости как он тут редкость.
             Очутиться он в типичной индуской деревушке где поможет жытелям с их проблемами. Станет он там своим, настоящей звездой в деревне.
             Очень герою будут по душе индусы, и будет у него 1 лучшый друг, с которым у них будет бизнес.
             Но прослишыт Mephisto про сей райский уголок, и отправить демонов разрушыть деревню. Демоны будут трощить и трощить, но
             никого не убивать, как приказал Mephisto. Все бы та ничего, вот только в той розрухе, привалило лучшего друга героя... каменным крестом, который индусы построили в честь героя.
             Не потерпит герой такого обращения, начнет он готовиться к войне, против Mephisto...`,
            }
        ]
    }

],
    [
        {
            title: "stage 2 popup 1",
            text: [
                {
                    title: "title 1",
                    text: `text1`,
                },
            ]
        },
    ]*/
]]